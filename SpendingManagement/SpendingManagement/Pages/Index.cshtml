@page
@model IndexModel
@{
    ViewData["Title"] = "Home";
}

<div class="container mt-3">

    <div class="card mb-3">
        <div class="card-header d-flex justify-content-between">
            <strong>My Wallets</strong>
            <a asp-page="/Wallets" class="text-primary">See all</a>
        </div>
        <div class="card-body">
            <ul class="list-group">
                @{
                    if(Model.Wallets.Count == 0)
                    {
                        <li class="list-group-item d-flex justify-content-center align-items-center">
                            <div class="text-center mt-4">
                                <p>There is no wallet</p>
                                <button class="btn btn-success px-4" data-bs-toggle="modal" data-bs-target="#createWalletModal">
                                    + Add Wallet
                                </button>
                            </div>
                        </li>
                    }
                }
                @foreach (var wallet in Model.Wallets)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @* <img src="images/@wallet.Icon" alt="@wallet.Name" width="30" height="30" class="me-2"> *@
                        <span>@wallet.Name</span>
                        <span class="ms-auto @(wallet.Balance < 0 ? "text-danger" : "text-success")">
                            @wallet.Balance?.ToString("N0") đ
                        </span>
                    </li>
                }
            </ul>
        </div>
    </div>

    <div class="card mb-3">
        <div class="card-header d-flex justify-content-between">
            <strong>Report This Month</strong>
            <a asp-page="/ReportDetail" class="text-primary">See report</a>
        </div>
        <div class="card-body">
            <!-- Buttons to switch between Expense and Income -->
            @{
                if(Model.LabelsJson.Length == 0)
                {
                    <p class='text-center text-muted mt-3'>No Data Available</p>
                }
                else{
                    <div class="text-center">
                        <button class="btn btn-danger" onclick="updateChart('expense')">Total Expense: @Model.ExpenseTotal.ToString("N0") VND</button>
                        <button class="btn btn-primary" onclick="updateChart('income')">Total Income: @Model.IncomeTotal.ToString("N0") VND</button>
                    </div>

                    <canvas id="reportChart"></canvas>
                }
            }
      
        </div>
    </div>


    <!-- Top Spending Section -->
    <div class="card mb-3">
        <div class="card-header d-flex justify-content-between">
            <span>Top Spending</span>
            @* <a asp-page="/DetailExpenses" class="text-success">See details</a> *@
        </div>

        <!-- Filter Buttons -->
        <div class="filter">
            <button id="weekButton" class="active" onclick="toggleSpending('week')">Week</button>
            <button id="monthButton" onclick="toggleSpending('month')">Month</button>
        </div>

        <div class="card-body">
            <ul class="list-group" id="weeklySpending">
                @foreach (var spending in Model.WeeklySpending)
                {
                    <li class="list-group-item d-flex justify-content-between">
                        <div>
                            @spending.Category
                        </div>
                        <span class="text-danger">@spending.Percentage% (@spending.Amount.ToString("N0") VND)</span>
                    </li>
                }
            </ul>

            <ul class="list-group d-none" id="monthlySpending">
                @foreach (var spending in Model.MonthlySpending)
                {
                    <li class="list-group-item d-flex justify-content-between">
                        <div>
                            @spending.Category
                        </div>
                        <span class="text-danger">@spending.Percentage% (@spending.Amount.ToString("N0") VND)</span>
                    </li>
                }
            </ul>
        </div>
    </div>

    <!-- Recent Transactions Section -->
    <div class="card">
        <div class="card-header d-flex justify-content-between">
            <span>Recent Transactions</span>
            <a asp-page="/Transactions" class="text-success">See all</a>
        </div>
        <div class="card-body">
            <ul class="list-group">
                @{
                    if (Model.RecentTransactions == null || Model.RecentTransactions.Count == 0) {
                            <p class='text-center text-muted mt-3'>There is no transactions</p>
                    }
                    else{
                        foreach (var transaction in Model.RecentTransactions)
                        {
                            <li class="list-group-item d-flex justify-content-between">
                                <div>
                                    @transaction.Category
                                    <br>
                                    <small class="text-muted">@transaction.Date.ToString("dddd, dd MMMM yyyy")</small>
                                </div>
                                <span class="text-danger">@transaction.Amount.ToString("N0") VND</span>
                            </li>
                        }
                    }
                }
           
                
                
            </ul>
        </div>
    </div>
</div>

<!-- Modal for Creating New Wallet -->
<div class="modal fade" id="createWalletModal" tabindex="-1" aria-labelledby="createWalletModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createWalletModalLabel">Create New Wallet</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="walletName" class="form-label">Wallet Name</label>
                        <input type="text" class="form-control" id="walletName" name="WalletName" required>
                    </div>
                    <div class="mb-3">
                        <label for="walletBalance" class="form-label">Initial Balance</label>
                        <input type="number" class="form-control" id="walletBalance" name="WalletBalance" min="0" required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" asp-page-handler="AddWallet" class="btn btn-primary">Create</button>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>

        // Parse JSON data from Razor Model
        var labels = @Html.Raw(Model.LabelsJson);
        var actualLabels = @Html.Raw(Model.ActualLabelsJson);
        var expenseData = @Html.Raw(Model.ExpenseJson);
        var expenseAvg = @Html.Raw(Model.ExpenseAvgJson);
        var incomeData = @Html.Raw(Model.IncomeJson);
        var incomeAvg = @Html.Raw(Model.IncomeAvgJson);

        var currentData = expenseData;
        var currentAvg = expenseAvg;
        var currentLabel = 'This month';
        var currentBorderColor = 'red';
        var currentBackgroundColor = 'rgba(255, 0, 0, 0.2)';

        if (labels.length !== 0) {

            var ctx = document.getElementById('reportChart').getContext('2d');

                var reportChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: currentLabel,
                        data: currentData,
                        borderColor: currentBorderColor,
                        fill: true,
                        backgroundColor: currentBackgroundColor
                    },
                    {
                        label: 'Previous 3-month average',
                        data: currentAvg,
                        borderColor: 'gray',
                        fill: false,
                        borderDash: [5, 5]
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                let value = tooltipItem.raw.toLocaleString() + ' VND';
                                let date = actualLabels[tooltipItem.dataIndex];
                                return `${tooltipItem.dataset.label}: ${value} (${date})`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        title: { display: true, text: 'Date' },
                        ticks: {
                            callback: function (value, index, values) {
                                if (index === 0 || index === values.length - 1) {
                                    return labels[index]; // Show only first and last label
                                }
                                return ""; // Hide other labels
                            },
                            autoSkip: false
                        }
                    },
                    y: {
                        title: { display: true, text: 'Amount (VND)' },
                        beginAtZero: true // Ensure Y-axis starts at 0
                    }
                }
            }
        });
        }
        


        window.updateChart = function (type) {
            if (type === 'expense') {
                currentData = expenseData;
                currentAvg = expenseAvg;
                currentLabel = 'This month';
                currentBorderColor = 'red';
                currentBackgroundColor = 'rgba(255, 0, 0, 0.2)';
            } else {
                currentData = incomeData;
                currentAvg = incomeAvg;
                currentLabel = 'This month';
                currentBorderColor = 'blue';
                currentBackgroundColor = 'rgba(0, 0, 255, 0.2)';
            }

            reportChart.data.datasets[0].data = currentData;
            reportChart.data.datasets[0].label = currentLabel;
            reportChart.data.datasets[0].borderColor = currentBorderColor;
            reportChart.data.datasets[0].backgroundColor = currentBackgroundColor;
            reportChart.data.datasets[1].data = currentAvg;

            reportChart.update();
        };
        
        function toggleSpending(type) {
            if (type === 'week') {
                document.getElementById("weeklySpending").classList.remove("d-none");
                document.getElementById("monthlySpending").classList.add("d-none");
                document.getElementById("weekButton").classList.add("active");
                document.getElementById("monthButton").classList.remove("active");
            } else {
                document.getElementById("weeklySpending").classList.add("d-none");
                document.getElementById("monthlySpending").classList.remove("d-none");
                document.getElementById("weekButton").classList.remove("active");
                document.getElementById("monthButton").classList.add("active");
            }
        }
    </script>
}
