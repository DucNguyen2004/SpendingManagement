@page
@model SpendingManagement.Pages.ReportDetailModel
@{
}
<div class="d-flex justify-content-between align-items-center mt-3">
    <h2>Report Details</h2>
    <div class="dropdown mt-3 text-end">
        <button class="btn btn-light dropdown-toggle" type="button" id="filterMenu" data-bs-toggle="dropdown" aria-expanded="false">
            Filter Transactions
        </button>
        <ul class="dropdown-menu" aria-labelledby="filterMenu">
            <li><a class="dropdown-item" href="#">Day</a></li>
            <li><a class="dropdown-item" href="#">Week</a></li>
            <li><a class="dropdown-item" href="#">Month</a></li>
            <li><a class="dropdown-item" href="#">Quarter</a></li>
            <li><a class="dropdown-item" href="#">Year</a></li>
            <li><a class="dropdown-item" href="#">All</a></li>
            <li><a class="dropdown-item" href="#">Custom</a></li>
        </ul>
    </div>
</div>
<div class="mt-3 p-3 bg-white shadow-sm rounded">
    <h5>Balance: <span class="text-primary">@Model.Balance.ToString("N2") VND</span></h5>
    <div class="d-flex justify-content-between">
        <span>Inflow: @Model.TotalIncome.ToString("N2") VND</span>
        <span>Outflow: @Model.TotalExpense.ToString("N2") VND</span>
    </div>
</div>
<!-- Tabs for Filtering -->
<ul class="nav nav-tabs mt-3">
    <li class="nav-item">
        <a class="nav-link" href="#">Last Month</a>
    </li>
    <li class="nav-item">
        <a class="nav-link active" href="#">This Month</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" href="#">Future</a>
    </li>
</ul>


<!-- Net Income Chart -->
<div class="mt-3 p-3 bg-white shadow-sm rounded">
    <h5 class="text-primary">Net Income: @Model.Balance.ToString("N2") VND</h5>
    <canvas id="netIncomeChart"></canvas>
</div>

<!-- Expense Breakdown Chart -->
<div class="mt-3 p-3 bg-white shadow-sm rounded">
    <h5 class="text-danger">Total Expenses: @Model.TotalExpense.ToString("N2") VND</h5>
    <a href="#" class="text-success">View Details</a>
    <canvas id="expenseChart" style="max-height:300px"></canvas>
</div>

<!-- Income Breakdown Chart -->
<div class="mt-3 p-3 bg-white shadow-sm rounded">
    <h5 class="text-primary">Total Incomes: @Model.TotalIncome.ToString("N2") VND</h5>
    <a href="#" class="text-success">View Details</a>
    <canvas id="incomeChart" style="max-height:300px"></canvas>
</div>
@* <!-- Net Income Chart --> *@
@* <div class="mt-3 p-3 bg-white shadow-sm rounded"> *@
@*     <h5 class="text-primary">Net Income: 9,355,000.00 VND</h5> *@
@*     <canvas id="netIncomeChart"></canvas> *@
@* </div> *@

@* <!-- Expense Breakdown Chart --> *@
@* <div class="mt-3 p-3 bg-white shadow-sm rounded"> *@
@*     <h5 class="text-danger">Total Expenses: 1,645,000.00 VND</h5> *@
@*     <a href="#" class="text-success">View Details</a> *@
@*     <div class="mt-3 p-3 bg-white shadow-sm rounded d-flex justify-content-center gap-lg-0"> *@
@*         <div class="chart-container" style="width: 200px; height: 200px;"> *@
@*             <canvas id="expenseChart"></canvas> *@
@*         </div> *@
@*         <div class="ms-3 d-flex flex-column justify-content-center"> *@
@*             <ul class="list-unstyled "> *@
@*                 <li><span class="badge bg-danger">●</span> Food</li> *@
@*                 <li><span class="badge bg-info">●</span> Shopping</li> *@
@*                 <li><span class="badge bg-success">●</span> Transport</li> *@
@*             </ul> *@
@*         </div> *@
@*     </div> *@
@* </div> *@

@* <!-- Income Breakdown Chart --> *@
@* <div class="mt-3 p-3 bg-white shadow-sm rounded"> *@
@*     <h5 class="text-primary">Total Incomes: 1,645,000.00 VND</h5> *@
@*     <a href="#" class="text-success">View Details</a> *@
@*     <div class="mt-3 p-3 bg-white shadow-sm rounded d-flex justify-content-center gap-lg-0"> *@
@*         <div class="chart-container" style="width: 200px; height: 200px;"> *@
@*             <canvas id="incomeChart"></canvas> *@
@*         </div> *@
@*         <div class="ms-3 d-flex flex-column justify-content-center"> *@
@*             <ul class="list-unstyled "> *@
@*                 <li><span class="badge bg-danger">●</span> Salary</li> *@
@*                 @* <li><span class="badge bg-info">●</span> Shopping</li> *@
@*                 @* <li><span class="badge bg-success">●</span> Transport</li> 
@*             </ul> *@
@*         </div> *@
@*     </div> *@
@* </div> *@
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    //     const labels = ["Week 1", "Week 2", "Week 3", "Week 4"]; Example weeks
    // const incomeData = [5000, 8000, 6000, 7000]; Example income values
    // const expenseData = [-2000, -3000, -2500, -4000]; Negative for stacking

    //     const ctx1 = document.getElementById('netIncomeChart').getContext('2d');
    //         new Chart(ctx1, {
    //     type: 'bar',
    //     data: {
    //         labels: labels,
    //         datasets: [
    //             {
    //                 label: 'Income',
    //                 data: incomeData,
    //                 backgroundColor: '#28a745' Green for income
    //             },
    //             {
    //                 label: 'Expense',
    //                 data: expenseData,
    //                 backgroundColor: '#dc3545' Red for expense
    //             }
    //         ]
    //     },
    //     options: {
    //         responsive: true,
    //         maintainAspectRatio: true,
    //         scales: {
    //             y: {
    //                 beginAtZero: true,
    //                 stacked: true Bars will be shown side by side, set to true if you want stacking
    //             },
    //             x: {
    //                 stacked: true
    //             }
    //         },
    //         plugins: {
    //             legend: {
    //                 display: true,
    //                 position: 'top'
    //             }
    //         }
    //     }
    // });
    document.addEventListener("DOMContentLoaded", function() {
        const expenseData = @Html.Raw(Model.ExpenseChartData);
        const incomeData = @Html.Raw(Model.IncomeChartData);
        const netIncomeData = @Html.Raw(Model.NetIncomeChartData);

        const expenseColors = [
    '#dc3545', '#17a2b8', '#28a745', '#ffc107', '#6610f2',
    '#fd7e14', '#6c757d', '#20c997', '#e83e8c', '#007bff'
];

const incomeColors = [
    '#28a745', '#007bff', '#ff851b', '#dc3545', '#20c997',
    '#6c757d', '#ffc107', '#6610f2', '#e83e8c', '#17a2b8'
];

            if (netIncomeData.length > 0) {
        new Chart(document.getElementById('netIncomeChart').getContext('2d'), {
            type: 'bar',
            data: {
                labels: netIncomeData.map(d => d.WeekLabel), // X-axis: Weeks
                datasets: [
                    {
                        label: 'Income',
                        data: netIncomeData.map(d => d.Income),
                            backgroundColor: '#007bff' // Green for income
                    },
                    {
                        label: 'Expense',
                        data: netIncomeData.map(d => d.Expense), // Negative values for stacking
                        backgroundColor: '#dc3545' // Red for expenses
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        stacked: true // ✅ Stack income & expense bars
                    },
                    x: {
                        stacked: true // ✅ Ensures stacking along x-axis
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    }
                }
            }
        });
    } else {
        document.getElementById('netIncomeChart').style.display = "none";
    }


            if (expenseData.length > 0) {
        new Chart(document.getElementById('expenseChart').getContext('2d'), {
            type: 'doughnut',
            data: {
                labels: expenseData.map(d => d.Label),
                datasets: [{
                    data: expenseData.map(d => d.Value),
                        backgroundColor: expenseColors.slice(0, expenseData.length)
                }]
            },
            options: { 
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: true,
                        position: 'right',
                        labels: {
                            usePointStyle: true,
                            boxWidth: 10,
                            padding: 20 
                            
                        }
                    }
                },
                layout: {
                    padding: {
                        right: 0 
                    }
                }
            }
        });
    } else {
        document.getElementById('expenseChart').style.display = "none";
    }

    if (incomeData.length > 0) {
        new Chart(document.getElementById('incomeChart').getContext('2d'), {
            type: 'doughnut',
            data: {
                labels: incomeData.map(d => d.Label),
                datasets: [{
                    data: incomeData.map(d => d.Value),
                        backgroundColor: incomeColors.slice(0, incomeData.length)
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false, 
                plugins: {
                    legend: {
                        display: true,
                        position: 'right',
                        labels: {
                            usePointStyle: true,
                            boxWidth: 10,
                            padding: 20
                        }
                    }
                },
                layout: {
                    padding: {
                        right: 0
                    }
                }
            }
        });
    } else {
        document.getElementById('incomeChart').style.display = "none";
    }


    });
</script>

